pipeline {
	agent any
	tools {
		jfrog 'jfrog-cli'
        maven 'Maven 3.3.9'
        jdk 'jdk8'
	}
	environment {
		DOCKER_IMAGE_NAME = "cloudsheger.jfrog.io/docker/petclinic:1.0"
		//SONAR_TOKEN_KEYS = credentials('sonar_token')
	}
	stages {
		stage('Clone') {
			steps {
				git branch: 'main', url: "https://github.com/cloudsheger/spring-petclinic-jenkins-pipeline-project.git"
			}
		}
        stage('Compile') {
            steps {
                sh 'mvn compile' //only compilation of the code
       }
    }
    stage('Test') {
      steps {
        sh '''
        mvn clean install -DskipTests=true
        ls
        pwd
        ''' 
        //if the code is compiled, we test and package it in its distributable format; run IT and store in local repository
      }
    }
	stage('Sonar Static Code Analysis') {
		steps {
			sh"mvn clean verify sonar:sonar \
                -Dsonar.projectKey=petclinic \
                -Dsonar.projectName='petclinic' \
                -Dsonar.host.url=http://localhost:9000 \
                -Dsonar.token=sqp_110558c75fd58216dc0dcc8cd2ef26e486da7b54"
		}
	}

		stage('Build Docker image') {
			steps {
				script {
                    sh'docker build -f docker-scan/app/Dockerfile  .'
                    // location of dockerfile docker-scan/app
					//docker.build("$DOCKER_IMAGE_NAME", '-f docker-scan/app/Dockerfile .')
				}
			}
		}

		stage('Scan and push image') {
			steps {
				dir('docker-scan/app/') {
					// Scan Docker image for vulnerabilities
					jf 'docker scan $DOCKER_IMAGE_NAME'

					// Push image to Artifactory
					jf 'docker push $DOCKER_IMAGE_NAME'
				}
			}
		}

		stage('Publish build info') {
			steps {
				jf 'rt build-publish'
			}
		}
	}
}